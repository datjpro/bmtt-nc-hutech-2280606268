import sys
import os

def binary_to_text(binary):
    """Chuy·ªÉn ƒë·ªïi binary th√†nh text"""
    text = ''
    for i in range(0, len(binary), 8):
        byte = binary[i:i+8]
        if len(byte) == 8:
            text += chr(int(byte, 2))
    return text

def decode_message_simple(data_file, delimiter='###END###'):
    """Gi·∫£i m√£ th√¥ng ƒëi·ªáp t·ª´ file d·ªØ li·ªáu"""
    try:
        with open(data_file, 'r') as f:
            lines = f.readlines()
        
        # L·∫•y c√°c gi√° tr·ªã pixel (b·ªè qua comment lines)
        pixel_values = []
        for line in lines:
            if not line.startswith('#') and line.strip():
                values = line.strip().split()
                for val in values:
                    try:
                        pixel_values.append(int(val))
                    except ValueError:
                        continue
        
        # Tr√≠ch xu·∫•t LSB ƒë·ªÉ t·∫°o binary message
        binary_message = ''
        for pixel in pixel_values:
            lsb = pixel & 1  # L·∫•y bit cu·ªëi c√πng
            binary_message += str(lsb)
        
        # Chuy·ªÉn binary th√†nh text
        decoded_text = binary_to_text(binary_message)
        
        # T√¨m delimiter ƒë·ªÉ l·∫•y message th·ª±c
        delimiter_pos = decoded_text.find(delimiter)
        if delimiter_pos != -1:
            actual_message = decoded_text[:delimiter_pos]
            return actual_message
        else:
            # N·∫øu kh√¥ng t√¨m th·∫•y delimiter, tr·∫£ v·ªÅ 50 k√Ω t·ª± ƒë·∫ßu
            return decoded_text[:50].rstrip('\x00')
            
    except Exception as e:
        return f"Error: {str(e)}"

def main():
    if len(sys.argv) != 2:
        print("Usage: python decrypt_simple.py <encoded_data_file>")
        print("Example: python decrypt_simple.py image_data.txt")
        return
    
    data_file = sys.argv[1]
    
    if not os.path.exists(data_file):
        print(f"‚ùå File not found: {data_file}")
        return
    
    print(f"üîç Decoding message from: {data_file}")
    
    decoded_message = decode_message_simple(data_file)
    
    print(f"üìú Decoded message: '{decoded_message}'")

if __name__ == "__main__":
    main()
